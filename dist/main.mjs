var t={d:(e,o)=>{for(var r in o)t.o(o,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:o[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{Z:()=>s});let o=0;const r=require("recursive-readdir"),a=require("fs");class s{constructor(t){this.options=t}apply(t){t.hooks.run.tap("AutoExport",(t=>this.handle(t))),t.hooks.watchRun.tap("AutoExport",(t=>this.handle(t)))}async handle(t){const e=(await r(this.options.folder)).map((t=>t.replace(/\.(js|vue)/,"")));if(e.length===o)return void console.error("No tasks amended.");o=e.length;let s=e.map((t=>`export { default as ${this.options.nameFormatter(t)} } from '${this.options.importFormatter(t)}'`)).join("\n");s+="\n",a.writeFileSync(this.options.writeTo,s)}}var n=e.Z;export{n as default};